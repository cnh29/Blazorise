@namespace Blazorise.DataGrid
@inherits BaseComponent
@typeparam TItem
@using Blazorise

<div style="display: grid;">

    <code style="color: black">
        @if (!Column.FilterReadonly)
        {
            <button class="toolbar-btn" @onclick="@DidClickRemove">
                <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-x" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path fill-rule="evenodd" d="M4.646 4.646a.5.5 0 0 1 .708 0L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 0 1 0-.708z" />
                </svg>
            </button>
        }
        @Column.Caption
    </code>
    @if (Column?.FilterTemplate is not null)
    {
        @Column.FilterTemplate(Column.Filter);
    }
    else
    {
        <div style="display: inline-flex">
            @{
                var columnValueType =  Column.GetValueType();
            }
            @if (columnValueType == typeof(decimal))
            {
                <NumericEdit TValue="decimal?" ReadOnly="@Column.FilterReadonly"  Value="@((decimal?)Column.Filter.SearchValue)"   ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(decimal?))
            {
                <NumericEdit TValue="decimal?" ReadOnly="@Column.FilterReadonly"  Value="@((decimal?)Column.Filter.SearchValue)" ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(double))
            {
                <NumericEdit TValue="double?" ReadOnly="@Column.FilterReadonly" Value="@((double?)Column.Filter.SearchValue)" ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(double?))
            {
                <NumericEdit TValue="double?" ReadOnly="@Column.FilterReadonly" Value="@((double?)Column.Filter.SearchValue)" ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(float))
            {
                <NumericEdit TValue="float?" ReadOnly="@Column.FilterReadonly" Value="@((float?)Column.Filter.SearchValue)" ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(float?))
            {
                <NumericEdit TValue="float?" ReadOnly="@Column.FilterReadonly" Value="@((float?)Column.Filter.SearchValue)"  ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(int) || columnValueType == typeof(int?))
            {
                <NumericEdit TValue="int?" ReadOnly="@Column.FilterReadonly" Value="@((int?)Column.Filter.SearchValue)" ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(long))
            {
                <NumericEdit TValue="long?" ReadOnly="@Column.FilterReadonly" Value="@((long?)Column.Filter.SearchValue)" ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(long?))
            {
                <NumericEdit TValue="long?" ReadOnly="@Column.FilterReadonly" Value="@((long?)Column.Filter.SearchValue)" ValueChanged="@((v) => OnValueChanged(v))" />
            }
            else if (columnValueType == typeof(bool) || columnValueType == typeof(bool?))
            {
                <Select TValue=bool? Class="blazor-input" ReadOnly=@Column.FilterReadonly SelectedValue=@((bool?)Column.Filter.SearchValue) SelectedValueChanged=@((v) => OnValueChanged(v))>
                    <SelectItem TValue=bool? Value="null">--Please Select--</SelectItem>
                    <SelectItem TValue=bool? Value="false">No</SelectItem>
                    <SelectItem TValue=bool? Value="true">Yes</SelectItem>
                </Select>

            }
            else if (columnValueType == typeof(DateTime) || columnValueType == typeof(DateTime?))
            {
                <DateEdit TValue="DateTime?" Date="@((DateTime?)Column.Filter.SearchValue)" DateChanged="@((v) => OnValueChanged(v))" ReadOnly=@Column.FilterReadonly />
            }
            else if (columnValueType == typeof(string))
            {
                <TextEdit InputMode=TextInputMode.Text Class="blazor-input" ReadOnly=@Column.FilterReadonly Text="@((string)Column.Filter.SearchValue)" TextChanged=@OnValueChanged />
            }
            <Filter DataType="@Column.GetValueType()" OperatorChanged="OperatorChangedHandler" />
        </div>



    }


</div>



